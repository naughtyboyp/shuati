void reverse(char* left, char* right)//逆序字符串函数
{
    while(left < right)
    {
        //1.前后交换
        char tmp = *left;
        *left = *right;
        *right = tmp;
        //2.交换下一位
        left++;
        right--;
    }
}




void leftmove(char* arr, int k)
{
    int len = strlen(arr);
    reverse(arr, arr+k-1);//逆序左边
    reverse(arr+k, arr + len -1);//逆序右边
    reverse(arr, arr+len-1);//逆序整体
}



//穷举法  效率低
int is_left_move(char* s1, char* s2)
{
    int len = strlen(s1);
    int i = 0;
    for(i = 0; i<len; i++)
    {
        leftmove(s1, 1);
        if(strcmp(s1, s2) == 0)
        {
            return 1;
        }
    }
    return 0;
}

/*int main()
{
    char arr1[] = "abcdef";
    char arr2[] = "defabc";
    int ret = is_left_move(arr1, arr2);
    if(ret)
    {
        printf("YES\n");
    }
    else
    {
        printf("NO\n");
    }
    return 0;
}*/



//2.//abcdefabcdef  包含所有旋转后的可能性
//连接函数 strcat 与 strncat 的区别
//strstr函数 判断是否是子串 如果有  返回值是第一次子串首元素出现的地址， 没有返回NULL


#include<stdio.h>
#include<string.h>
int isleftmove(char* str1, char* str2)
{
    int len1 = strlen(str1);
    int len2 = strlen(str2);
    if(len1 != len2)
    {
        return 0;
    }
    //1.追加
    //strcat  自己追加不能用
    //strcat(str1, str1);地址发生改变，error
    strncat(str1, str1, len1);
    //2.判断str2是否是str1的子串
    //strstr -- 找子串
    char* ret = strstr(str1, str2);//在str1中找是否有 str2 这个子串,没找到返回NULL
    if(ret == NULL)
    {
        return 0;
    }
    else
    {
        return 1;
    }
    return 0;
}
int main()
{
	char arr1[30] = "abcdef";
	char arr2[] = "cdefab";
	if(isleftmove(arr1, arr2))
    {
        printf("%Yes");
    }
    else
    {
        printf("No");
    }
	return 0;
}

